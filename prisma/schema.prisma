// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @unique @default(uuid())
  email         String   @unique
  provider      Provider
  role          Role
  streams       Stream[]  @relation("user")
  upvotes       Upvote[]
  added         Stream[] @relation("addedBy")
}

model Stream {
  id              String   @id  @default(uuid())
  type            StreamType
  url             String
  title           String    @default("")
  bigImage        String    @default("")
  smallImage      String    @default("")
  extractedId     String
  played          Boolean    @default(false)
  playedTs       DateTime?
  createdAt       DateTime   @default(now())
  active          Boolean    @default(true)
  upvotes         Upvote[]
  addedById       String
  userId          String
  user            User      @relation(fields: [userId], references: [id], name: "user")
  addedBy         User      @relation(fields: [addedById], references: [id], name: "addedBy")
  currentStream   CurrentStream?

}


model CurrentStream {
  userId        String   @id
  streamId     String?   @unique
  stream       Stream ?    @relation(fields: [streamId], references: [id])
}

model Upvote {
  id             String  @id @default(uuid())
  userId         String
  streamId       String
  user           User      @relation(fields: [userId], references: [id])
  stream         Stream    @relation(fields: [streamId], references: [id],onDelete: Cascade )
  @@unique([userId, streamId])



}

enum StreamType {
  Spotify
  Youtube
}

enum Role {
  Streamer
  EndUser
}


enum Provider {
  Google
}